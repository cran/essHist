// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// msQuantile
NumericVector msQuantile(int n, int nsim);
RcppExport SEXP _essHist_msQuantile(SEXP nSEXP, SEXP nsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    rcpp_result_gen = Rcpp::wrap(msQuantile(n, nsim));
    return rcpp_result_gen;
END_RCPP
}
// boundedHistogram
DataFrame boundedHistogram(NumericVector cumSum, IntegerVector start, IntegerVector rightIndex, NumericVector lower, NumericVector upper);
RcppExport SEXP _essHist_boundedHistogram(SEXP cumSumSEXP, SEXP startSEXP, SEXP rightIndexSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type cumSum(cumSumSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rightIndex(rightIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(boundedHistogram(cumSum, start, rightIndex, lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_essHist_msQuantile", (DL_FUNC) &_essHist_msQuantile, 2},
    {"_essHist_boundedHistogram", (DL_FUNC) &_essHist_boundedHistogram, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_essHist(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
